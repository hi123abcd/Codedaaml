************** BT3 ************************
// SPDX-License-Identifier: MIT
pragma solidity >=0.6.12 <0.9.0;



contract BankAccount {
    mapping(address => uint256) private balances;

    function deposit() public payable {
        require(msg.value > 0, "Amount to deposit must be greater than 0");
        balances[msg.sender] += msg.value;
    }

    function withdraw(uint256 amount) public {
        require(balances[msg.sender] >= amount, "Insufficient balance");
        balances[msg.sender] -= amount;
        payable(msg.sender).transfer(amount);
    }

    function getBalance() public view returns (uint256) {
        return balances[msg.sender];
    }
}









************* BT4 *************************

// SPDX-License-Identifier: MIT
pragma solidity >=0.6.12 <0.9.0;



contract StudentData {
    struct Student {
        uint256 id;
        string name;
        uint256 age;
        string major;
    }

    Student[] public students;
    uint256 public studentCount;

    constructor() {
        studentCount = 0;
    }

    function addStudent(string memory _name, uint256 _age, string memory _major) public {
        studentCount++;
        students.push(Student(studentCount, _name, _age, _major));
    }

    function getStudent(uint256 _id) public view returns (uint256, string memory, uint256, string memory) {
        require(_id > 0 && _id <= studentCount, "Invalid student ID");
        Student memory student = students[_id - 1];
        return (student.id, student.name, student.age, student.major);
    }

    function updateStudent(uint256 _id, string memory _name, uint256 _age, string memory _major) public {
        require(_id > 0 && _id <= studentCount, "Invalid student ID");
        Student storage student = students[_id - 1];
        student.name = _name;
        student.age = _age;
        student.major = _major;
    }

    // Fallback function to accept Ether
    receive() external payable {}

    // Fallback function to accept Ether (deprecated)
    fallback() external payable {}
}

      

